---
breadcrumb: PCF Metrics Documentation
title: Monitor Configuration
owner: PCF Metrics
---
This topic describes how to configure event and metric monitors for your applications using PCF Metrics' Beta `monitors-api` endpoint. 

<p class="note"><b>Note</b>: You must have the appropriate permissions to view or manage application monitors in PCF Metrics.</p>

##<a id='view-monitors'></a> View Monitors

You can use the following cURL and API commands to view event and metric monitors.

### cURL 
<pre>
curl -H "Authorization: $(cf oauth-token)" -vvv -G "https://monitors-api.sys.[DOMAIN]/api/v1/$(cf app [APP_NAME] --guid)/monitors/" | jq
</pre>

* Replace `[DOMAIN]` with your domain

* Replace `[APP_NAME]` with the name of your app  

### API
<pre>
GET https://monitors-api.sys.[DOMAIN]/api/v1/[APP_GUID]/monitors/
</pre>

* Replace `[DOMAIN]` with your domain

* Replace `[APP_GUID]` with the GUID of your app  

##<a id='delete-monitors'></a> Delete Monitors

You can use the following cURL and API commands to delete event and metric monitors.

### cURL
<pre>
curl -H "Authorization: $(cf oauth-token)" -vvv -G "https://monitors-api.sys.[DOMAIN]/api/v1/$(cf app [APP_NAME] --guid)/monitors/[MONITOR_GUID]" -X DELETE
</pre>

* Replace `[DOMAIN]` with your domain

* Replace `[APP_NAME]` with the name of your app

* Replace `[MONITOR_GUID]` with the GUID of your app  

### API 
<pre>
DELETE https://monitors-api.sys.[DOMAIN]/api/v1/[APP_GUID]/monitors/[MONITOR_GUID]
</pre>

* Replace `[DOMAIN]` with your domain

* Replace `[APP_GUID]` with the GUID of your app

* Replace `[MONITOR_GUID]` with the GUID of your app

##<a id='create-monitors'></a> Create Monitors

You can use the following cURL and API commands to create event and metric monitors.

The following attributes are optional and can be omitted from your commands if not needed:

  *  `warning_threshold`
  *  `critical_webhook_url`
  *  `critical_json_payload`
  *  `warning_webhook_url`
  *  `warning_json_payload`

### cURL
<pre>
curl -H "Authorization: $(cf oauth-token)" "https://monitors-api.sys.[DOMAIN]/api/v1/$(cf app [APP_NAME] --guid)/monitors" -d '{ "metric_name": "cf.system.latency","metric_type": "gauge","metric_unit": "milliseconds","name": "monitor_name","snooze_time_in_minutes": 1,"threshold_comparator": "<=","critical_threshold": 100.0,"warning_threshold": 70.0,"critical_webhook_url": "critical_webhook_url","critical_json_payload": "critical_json_payload","warning_webhook_url": "warning_webhook_url","warning_json_payload": "warning_json_payload" }'
</pre>

* Replace `[DOMAIN]` with your domain

* Replace `[APP_NAME]` with the name of your app

### API
<pre>
POST https://monitors-api.sys.[DOMAIN]/api/v1/[APP_GUID]/monitors/
</pre>
    
* Replace `[DOMAIN]` with your domain

* Replace `[APP_GUID]` with the GUID of your app

BODY:
<pre>
{
    "name": "Lathrop CPU",
    "metric\_name": "cf.system.cpu",
    "metric\_type": "gauge",
    "metric\_unit": "percentage",
    "snooze\_time\_in\_minutes": 15,
    "threshold\_comparator": ">=",
    "critical\_threshold": 10,
    "warning\_threshold": 5,
    "critical\_webhook\_url": "",
    "critical\_json\_payload": "",
    "warning\_webhook\_url": "",
    "warning\_json\_payload": ""
}
</pre>

##<a id='view-triggered-monitors'></a> View Triggered Monitors

You can use the following cURL and API commands to view triggered event and metric monitors.

### cURL 
<pre>
curl -H "Authorization: $(cf oauth-token)" -vvv -G "https://monitors-api.sys.[DOMAIN]/api/v1/$(cf app [APP_NAME] --guid)/triggered_monitors/" | jq
</pre>

* Replace `[DOMAIN]` with your domain

* Replace `[APP_NAME]` with the name of your app

### API 
<pre>
GET https://monitors-api.sys.[DOMAIN]/api/v1/[APP_GUID]/triggered_monitors/
</pre>

* Replace `[DOMAIN]` with your domain

* Replace `[APP_GUID]` with the GUID of your app

##<a id='configure-monitors-yml'></a> Configure Monitors via YAML

In addition to configuring monitors directly via API, you can also automate monitors configuration via YAML file. The examples below show the correct YAML file format for automating event and metric monitor configuration.

The following attributes are optional and can be omitted from your YAML file if not needed:

  *  `warning_threshold`
  *  `critical_webhook_url`
  *  `critical_json_payload`
  *  `warning_webhook_url`
  *  `warning_json_payload`

### Metric monitor .yml example format
<pre>
---
- metric_name: cf.system.latency
  metric_type: gauge
  metric_unit: milliseconds
  name: Latency
  snooze_time_in_minutes: 1
  threshold_comparator: ">="
  critical_threshold: 60
  warning_threshold: 50
  critical_webhook_url: critical_webhook_url
  critical_json_payload: critical_json_payload
  warning_webhook_url: warning_webhook_url
  warning_json_payload: warning_json_payload
</pre>
    
### Event monitor .yml example format
<pre>
---
- metric_name: cf.system.events.start
  metric_type: event
  metric_unit: per minute
  name: App Start
  snooze_time_in_minutes: 1
  threshold_comparator: ">="
  critical_threshold: 1
  warning_threshold: 0
  critical_webhook_url: critical_webhook_url
  critical_json_payload: critical_json_payload
  warning_webhook_url: warning_webhook_url
  warning_json_payload: warning_json_payload
</pre>

### Multiple monitor .yml example format
<pre>
---
- metric_name: cf.system.latency
  metric_type: gauge
  metric_unit: milliseconds
  name: Latency
  snooze_time_in_minutes: 1
  threshold_comparator: ">="
  critical_threshold: 60
  warning_threshold: 50
- metric_name: cf.system.cpu
  metric_type: gauge
  metric_unit: percentage
  name: CPU
  snooze_time_in_minutes: 1
  threshold_comparator: ">="
  critical_threshold: 60
  warning_threshold: 50
- metric_name: cf.system.events.start
  metric_type: event
  metric_unit: per minute
  name: App Start
  snooze_time_in_minutes: 1
  threshold_comparator: ">="
  critical_threshold: 1
  warning_threshold: 0
- metric_name: cf.system.memory
  metric_type: gauge
  metric_unit: percentage
  name: Lathrop Memory
  snooze_time_in_minutes: 5
  threshold_comparator: ">="
  critical_threshold: 10
  warning_threshold: 5
</pre>

### Apply .yml cURL Command

To automate event and metric monitor configuration via YAML file, run the following cURL command.

<pre>
curl -H "Authorization: $(cf oauth-token)" -H "Content-Type: application/yaml" --data-binary "@/[PATH-TO-FILE.yml]" -k "https://monitors-api.sys.[DOMAIN]/api/v1/$(cf app [APP_NAME] --guid)/monitors/" -vvv -X PUT
</pre>

* Replace `[DOMAIN]` with your domain

* Replace `[APP_NAME]` with the name of your app
