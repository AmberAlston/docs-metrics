---
breadcrumb: PCF Metrics Documentation
title: PCF Metrics Product Architecture
owner: PCF Metrics
---

This topic describes the product architecture of Pivotal Cloud Foundry (PCF) Metrics.

## <a id="overview"></a>Overview

The diagram below displays the components of PCF Metrics in bold, as well as the Cloud Foundry components that the PCF Metrics system interacts with.

<%= image_tag('architecture.png') %>

See the following sections to understand the several processes that happen within the PCF Metrics system.

##<a id="data-flow"></a> How Data Flows from the Firehose to the Datastores

This section describes how PCF Metrics fills its datastores with metric and log data.

### Components

The diagram below highlights the components involved in this process.

![flow one](flow1.png)

### Process 

The following table describes how the components act during each stage.

<table>
	<tr>
		<th>Stage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>1</td>
		<td>The <code>metrics-ingestor</code> app does the following:<br><br>
			<ul>
				<li>Receives app logs from the firehose and forwards them to both the <code>elasticsearch-logqueue</code> and <code>mysql-logqueue</code> apps</li>
				<li>Receives container metrics and HTTPStartStop events from the Firehose and forwards them to the <code>mysql-logqueue</code> app</li>
			</ul>
		</td>
	</tr>
	<tr>
		<td>2</td>
		<td>
		In this stage, each of the logqueues act independently:
		<br><br>
		<b>Elasticsearch logqueue</b>
		<br><br>
		The <code>elasticsearch-logqueue</code> app buffers logs and writes them to the Elasticsearch datastore.
		<br><br>
		<b>MySQL logqueue</b>
		<br><br>
		The <code>mysql-logqueue</code> app that buffers logs and writes each data type to MySQL as follows:<br><br>
		<ul>
			<li><b>Container metrics</b>: Inserts the message into the <code>container_metric</code> table of the MySQL component</li>
			<li><b>HTTPStartStop events</b>: inserts the message into the <code>http_start_stop</code> table of the MySQL component</li>
			<li><b>App logs</b>: Parses the log message for an app event name and inserts the message into the <code>app_event</code> table of the MySQL component.</li>
		</ul>
	</tr>
	<tr>
		<td>3</td>
		<td>The purpose of this stage is to aggregate the data in stored in MySQL. The <code>metrics-aggregator</code> app, whicn runs chronically based on an <code>AGGREGATE_FREQUENCY</code> property, does the following:<br><br>
		<ol>
			<li>Retrieves container metrics and HTTPStartStop event data from the MySQL component</li>
			<li>Aggregates the data for each app over the last four minutes, grouped by one minute intervals.</li>
			<li>Inserts the aggregates into the <code>app_metric_rollup</code> table of the MySQL component. 
			</li>
			<p class="note"><strong>Note</strong>: If the record for an app and minute already exists, the Metrics Aggregator updates the record.</p>
		</ol>
		</td>
	</tr>
</table>

##<a id="user-flow"></a> How the UI Retrieves Data from the Datastores

This section describes the flow of data through the system when an end user makes a request. 

### Components

The diagram below highlights the components involved in this process.

![Flow 2](flow2.png)

### Process

The following table describes how the components act during each stage.

<table>
	<tr><th>Stage</th><th>Description</th></tr>
	<tr><td>1</td>
		<td>
			A user launches <code>metrics.SYSTEM-DOMAIN</code> in a browser and enters her UAA credentials. 
		</td>
	</tr>
	<tr><td>2</td>
		<td>		
			PCF Metrics displays a page in which the user can select any app returned by the Cloud Controller API based on the UAA credentials entered by the user. 
		</td>
	</tr>
	<tr><td>3</td>
		<td>
			A user selects an app from the dropdown menu, which does the following:<br></br>
			<ol>
				<li>Opens a Server-Sent Events (SSE) connection  to the <code>metrics</code> app (metrics API) </li>
				<li>Sends HTTP Put requests to the metrics API to retrieve metrics and logs for the last hour</li>
				<p class="note"><strong>Note</strong>: <b>1 Hour</b> is the default time frame selection.</p>
			</ol>
		</td>
	</tr>
	<tr>
		<td>4</td>
		<td>
			The metrics API receives the requests from the browser and creates jobs on Redis channels that describe the type of metric, log, or event requested, as well as the time period.

			<p class="note"><strong>Note</strong>: PCF Metrics uses Redis as a <a href="http://redis.io/topics/pubsub">pub-sub</a> mechanism between the metrics API and worker apps to marshal metrics and logs.</p>
		</td>
	</tr>
	<tr>
		<td>
			5
		</td>
		<td>
			The <code>worker-app-dev</code> and <code>worker-app-logs</code> apps, which subscribe to the job channels on Redis, recognize the jobs created by the metrics API. The apps remove their corresponding jobs and do the following:<br><br>
			<ol>
				<li>Retrieve data from the datastores:
					<ol>
						<li><code>worker-app-dev</code> queries MySQL to retrieve any metrics and events requested for the time period.</li>
						<li><code>worker-app-logs</code> queries Elasticsearch to retrieve the logs for the time period requested.</li>
					</ol>
				</li>
				<li>Publish the data to Redis</li>
			</ol>
		</td>
	</tr>
	<tr>
		<td>6</td>
		<td>Redis forwards the data to the metrics API.</td>
	</tr>
	<tr>
		<td>7</td>
		<td>The metrics API streams the the data to the browser over SSE. 
		<br><br>
		<b>Result</b>: The UI displays the data requested by the user.</td>
	</tr>
</table>

## <a id="workers"></a> How Worker Apps Monitor the System

The following table describes the two worker components that PCF Metrics uses to monitor other components in the system.

<table>
	<tr>
		<th width="28%">Component</th>
		<th>Function</th>
	</tr>
	<tr>
		<td><code>worker-health-check</code></td>
		<td>The health-check worker is an app that does the following:<br><br>
		<ul>
			<li>Checks whether the apps deployed by PCF Metrics can reach MySQL, Elasticsearch, and Redis</li>
			<li>Records the number of MySQL connections and Redis channels every minute</li>
		</ul>
		 </td>
	</tr>
	<tr>
		<td><code>worker-reaper</code></td>
		<td>The reaper worker is an app that removes orphaned connections from the <code>worker-app-dev</code> and <code>worker-app-logs</code> apps to Redis. 
		<br><br>
		PCF Metrics requires the reaper worker because if either of the above apps restart, Redis does not remove their connections.</td>
	</tr>
</table>