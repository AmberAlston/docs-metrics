---
breadcrumb: PCF Metrics Documentation
title: Sizing PCF Metrics For Your System 
owner: PCF Metrics
---

<style>
    .note.warning {
        background-color: #fdd;
        border-color: #fbb
    }

    .note.warning:before {
        color: #f99;
     }
</style>

This topic describes how to configure Pivotal Cloud Foundry (PCF) Metrics for high availability. Operators can use these procedures to optimize PCF Metrics for high capacity.

For more information about the PCF Metrics components, see [PCF Metrics Product Architecture](architecture.html).

To perform the procedures in this topic, you must navigate to the Ops Manager Installation Dashboard and click the **Metrics** tile.

##<a id='metrics-datastore'></a> Configuring the Metrics Datastore

To calculate the correct memory allocation for each In-memory Database System (IMDS) component of PCF Metrics, use the following formulas:

* Network: (40 * 3600 * 24) / numOfShards * numOfReplicas * numOfAppGuids
* Container: (40 * 3600 * 24) / numOfShards * numOfReplicas * numOfAppGuids
* AppEvent: ((32 * 3600 * 24) / numOfShards * numOfReplicas * numOfAppGuids) + (12 * numOfTotalAppEvents)

If you increase your number of app instances (numOfAppGuids), you must allocate additional memory.

##<a id='log-datastore'></a> Configuring the Log Datastore

PCF Metrics uses Elasticsearch to store logs. Each Elasticsearch node contains multiple shards of log data, divided by time slice. To customize PCF Metrics for high capacity, you can scale the number of Elasticsearch nodes.

###<a id='log-considerations'></a> Considerations for Scaling

To determine the number of Elasticsearch nodes required for PCF Metrics, consider how many logs the apps in your deployment emit and the average size of each log.

If your average log size is 1 kilobyte, and each node has 1 terabyte of available disk space, then each node has a maximum storage capacity of 1 billion log messages. If your apps emit 3 billion logs over a 24-hour period, you need at least 3 nodes to hold the data and 3 additional nodes for high-availability replication. 

This example assumes that your apps emit logs at a continuous rate over 24 hours. However, apps typically do not emit logs continuously. If your apps emit 2 billion of the 3 billion logs between 8am and 4pm, you must determine the minimum node-to-shard ratio to accommodate that rate over the 8-hour period. Because your apps emit 1 billion logs over a 4 hour span, you need at least 6 nodes (24 hours/6 nodes = 4 hours worth of shards per node) to hold the data and an additional 6 nodes for high-availability replication.   

###<a id='log-scaling'></a> Procedures for Scaling

After determining the number of Elasticsearch nodes needed for your deployment, perform the following steps to scale your nodes:

1. From the **Settings** tab of the **Metrics** tile, click **Resource Config**.
1. Locate the **ElasticSearchData** job and select the dropdown menu under **Instances** to change the number of instances.
1. Click **Save**.  

##<a id='ingestor'></a> Configuring the Ingestor

PCF Metrics deploys the Ingestor as an app within PCF. The Ingestor consumes logs and metrics from the Loggregator Firehose, sending metrics to Kafka and logs to the Logqueue app. To customize PCF Metrics for high capacity, you can scale the number of Ingestor app instances and increase the amount of memory per instance.

Because apps emit logs at different volumes and frequencies, you should not scale the Ingestor by matching the number of Ingestor instances to the number of app instances in your deployment.

Because ingestor performance is affected by Loggregator performance it can be difficult to determine in advance the proper configuration.  Because of the ease in scaling these components we recommend starting with a minimal configuration then evaluating performance over a period of time and scaling 

The Ingestor app can handle relatively large loads. For high availability, you must have at least 2 instances of the Ingestor app running. If your deployment is running fewer than 2000 app instances, use the following procedure to scale your Ingestor:   

1. Scale your Ingestor app to 2 instances:
	<pre class="terminal">$ cf scale INGESTOR-APP -i 2</pre>
1. Evaluate the CPU and memory load on your Ingestor instances:
	<pre class="terminal">
	$ cf app INGESTOR-APP
	Showing health and status for app INGESTOR in org TK / space TK as admin...
	OK

	requested state: started
	instances: 2/2
	usage: 1G x 2 instances
	urls: TK
	last uploaded: Sun Apr 24 16:11:29 UTC 2016
	stack: cflinuxfs2
	buildpack: python 1.5.5
		
		state     since                    cpu    memory        disk           details
	<span>#</span>0   running   2016-07-21 03:49:58 PM   0.0%   44.4M of 1G   154.8M of 1G
	<span>#</span>1   running   2016-07-21 02:44:43 PM   0.1%   45.7M of 1G   154.8M of 1G
	</pre>

	If your average memory usage exceeds 50% or your CPU consistently averages over 85%, add more instances with `cf scale INGESTOR-APP -i INSTANCE-NUMBER`.

	In general, you should scale the Ingestor app by adding additional instances. However, you can also scale the Ingestor app by increasing the amount of memory per instance:

	<pre class="terminal">$ cf scale INGESTOR-APP -m NEW-MEMORY-LIMIT</pre>

	For more information on scaling app instances, see [Scaling an Application Using cf scale](../pivotalcf/devguide/deploy-apps/cf-scale.html).

	<p class="note warning">
	<strong>WARNING: </strong> If you decrease the number of Ingestor instances, you may lose data currently being processed on the instances you eliminate.</p>

##<a id='logqueue'></a> Configuring the Logqueue

PCF Metrics deploys the Logqueue as an app within PCF. The Logqueue consumes logs from the Ingestor and forwards them to the Elasticsearch nodes. To customize PCF Metrics for high capacity, you can scale the number of Logqueue app instances and increase the amount of memory per instance.

To determine the number of Logqueue instances required for your deployment, multiply your number of Elasticsearch nodes by 1.5. This is a general estimate and you may need fewer instances depending on your deployment. To optimize resource allocation, provision fewer instances initially and increase instances until you achieve desired performance.

To scale your Logqueue app instances, perform the following command:
<pre class="terminal">$ cf scale LOGQUEUE-APP -i INSTANCE-NUMBER</pre>

To scale the memory limit per Logqueue app instance, perform the following command:
<pre class="terminal">$ cf scale LOGQUEUE-APP -m NEW-MEMORY-LIMIT</pre>

<p class="note warning">
<strong>WARNING: </strong> If you decrease the number of Logqueue instances, you may lose data currently being processed on the instances you eliminate.</p>

##<a id='troubleshooting'></a> Troubleshooting

To troubleshoot PCF Metrics, review the list of common issues below. To resolve certain issues, you must check the health of your Elasticsearch cluster.

###<a id='common-issues'></a> Common Issues

The following list includes common issues and their solutions:

* **Websocket Disconnects**: If you see Websocket disconnects logs in the Ingestor app, consider adding additional Ingestor instances. The Firehose may be dropping the Ingestor connection to avoid back pressure.
* **503 Error**: If you encounter 503 errors when accessing the PCF Metrics UI in your browser, your Elasticsearch nodes may have become unresponsive. Check the Elasticsearch index health by following the procedure below, and consider adding additional Elasticsearch nodes.

###<a id='check-cluster-health'></a> Check Elasticsearch Cluster Health 

To check the health of your Elasticsearch cluster, perform the following steps:

1. Retrieve the IP address of your Elasticsearch master node by navigating to the **Metrics** tile in the Ops Manager Installation Dashboard, clicking the **Status** tab, and recording the IP address next to **ElasticSearchMaster**.
1. SSH into the Ops Manager VM by following the instructions in [SSH into Ops Manager](../pivotalcf/customizing/trouble-advanced.html#ssh).
1. From the Ops Manager VM, use `curl` to target the IP address of your Elasticsearch master node. Follow the instructions in the [Cluster Health](https://www.elastic.co/guide/en/elasticsearch/reference/2.2/_cluster_health.html) topic of the Elasticsearch documentation.


-------------
QUESTIONS

1) What does this mean? "In PCF Metrics 1.1 you are able to increase instances of ingestor and log queue components, to accommodate higher volumes.  However altering the IMDS and Elasticsearch configurations are not supported.  If you alter these configurations you will lose any data saved to that point."

2) Where do we find the IP address of the Elasticsearch master node? Through the Status tab? 

3) Do we scale the IMDS component through the Resource Config and scaling Networks Metrics Data Store and Container Metrics Data Store? Do we scale both?

4) Are the IMDS formulas still correct?
